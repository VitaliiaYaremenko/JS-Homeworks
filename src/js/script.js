console.log(a); // // Результат: undefined
var a = 10;

// В js є механизм 'підняття', чи Hosting. У якому змінні та оголошення функцій пересуваються вгору своєї області
// видимості перед тим як код буде виконано.
// Саме по цій причині результат виконання var - undefined. Адже js 'підняв' оголошення змінної var, і вона була
// ініціалізована зі значенням undefined.
// ____________________________________________________________

myFunction(); // Результат: Hello, world!

function myFunction() {
  console.log('Hello, world!');
}

// Function declaration  також мають подібну поведунку. Відбувається Hosting, тому функція може буди виклина до моменту
// ії відтворення.
// ____________________________________________________________

console.log(b); // Результат:  Cannot access 'b' before initialization.
let b = 5;

// Змінні які були оголошенні через let та const потрапляють в "temporal dead zone". Це говорить про те що такі змінні
// чи константи не можуть бути оголошені раніше. Так як ми не можемо отримати до них доступ до того моменту поки вони не
// будуть створені.
// В результаті такого виконання ми отримуємо помилку.
// ____________________________________________________________

const myArrowFunction = () => {
  console.log('Hello from arrow function');
};

myArrowFunction(); // Результат: Hello from arrow function

// Таким чином працюють і функції створені через const (Function Expression).
// Ми не можемо отримати до них доступ до того моменту як вони будуть створені.
// В даному прикладі виклик функції відбувся після моменту ініціалізації функції.
// Тому із функції ми отримуємо те що очікуємо: 'Hello from arrow function'.
// ____________________________________________________________

hoisted(); // Результат: "This function has been hoisted."

function hoisted() {
  console.log('This function has been hoisted.');
}
// ____________________________________________________________

expression(); // Результат: 'Cannot access 'expression' before initialization'

const expression = function () {
  console.log('Will this work?');
};

// Оголошення змінної const expression, піднімається, але в контексті функції (Function Expression) - ні.
// Адже вона не існує до тих пір, поки виконання коду не дійде до рядка, де вона була оголошена.
// Це означає, використовувати змінну до її оголошення неможливо. В результаті чого буде отримана помилка.
